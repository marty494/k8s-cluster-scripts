---
- name: test playbook
  hosts: nodes
  ## we can't gather facts until we have set the default password and swapped keys (we'll manually invoke it later)
  gather_facts: false

  # Variables
  vars_files:
  - vars.yml
    

  tasks:
  - name: Check if we need to set password on first login
    wait_for:
      timeout: 0
    register: connect_rs
    ignore_unreachable: yes

  - when: connect_rs is unreachable
    name: Change password on initial login
    delegate_to: 127.0.0.1
    become: no
    expect:
      command: sshpass -p {{ default_user_default_pass }} ssh {{ default_user }}@{{ ansible_host }}
      timeout: 60
      responses:
          "Current password:": "{{ default_user_default_pass }}"
          "New password:": "{{ default_user_new_pass }}"
          "Retype new password:": "{{ default_user_new_pass }}"
    register: status

  - name: Change 'become' pass, to match login password
    connection: local
    set_fact:
      ansible_become_pass: "{{ default_user_new_pass }}"

  - name: Copy Ansible server pubkey to remote machine
    delegate_to: 127.0.0.1
    become: no
    command: sshpass -p {{ default_user_new_pass }} ssh {{ default_user }}@{{ ansible_host }} "bash -c 'echo {{ pubkey }} > /home/ubuntu/.ssh/authorized_keys'"

  ## Now that we have fixed the messy business of default passwords and key exchange, we need to gather facts, with this little task
  - name: Gathering facts
    setup:

  # FROM THIS POINT IT SHOULD NOT BE NECESSARY TO USE SSHPASS OR PASSWORDS AT ALL
  # AT SOME POINT WE NEED TO THINK ABOUT DISABLING PASSWORD-BASED AUTHENTICATION


  # ---------------------------------------------------------------------------------------------------
  # section for trying to stop unattended upgrade from locking the apt-get app and breaking the playbook
  - name: Disable unattended upgrade
    become: yes
    replace:
      path: /etc/apt/apt.conf.d/20auto-upgrades
      regexp: '1'
      replace: '0'
      backup: yes
    register: unattendedupgrade

  # This could be later, but would require a second reboot, which is slow. We do it now so no need for extra reboots
  - name: Set OS properties necessary for running containers
    become: yes
    become_user: root
    lineinfile:
      path: "{{cmdlinefile}}"
      backrefs: yes
      regexp: '(^.*fixrtc.*$)'
      line: '\1 {{cmdlinecontents}}'
    register: ospropertieschanged

  - name: Reboot for disable (and cgroup) to take effect
    become: yes
    become_user: root
    reboot:
      reboot_timeout: 300
    when: unattendedupgrade.changed or ospropertieschanged.changed
  # ---------------------------------------------------------------------------------------------------


  - name: Update
    become: yes
    apt: update_cache=true cache_valid_time=3600
      #upgrade: dist
    
  - name: Install essentials, including NFS driver, needed for attaching to NAS
    become: yes
    apt:
      pkg: 
      - htop
      - net-tools
      - vim
      - nfs-kernel-server
      state: present    

  - name: Set hostname
    become: yes
    hostname:
      name: "{{ inventory_hostname }}"

  - name: Fetch master node pubkey
    slurp:
      src: /home/ubuntu/.ssh/id_rsa.pub
    delegate_to: "{{ master }}"
    register: master_pubkey

  - name: Write master pubkey to authorized_keys
    lineinfile:
      path: /home/ubuntu/.ssh/authorized_keys
      line: "{{ master_pubkey['content'] | b64decode }}"
      create: yes

  - name: Get master to add pubkey to known hosts # could NOT get this to work correctly by generating a key pair and using the builtin support for known_host
    delegate_to: "{{ master }}"
    expect:
      command: "ssh ubuntu@{{ ansible_default_ipv4.address }} sleep 0"
      responses:
          (?i)Are you sure: "yes"

  - name: Join node to cluster
    command: "k3sup join --ip {{ ansible_default_ipv4.address }} --server-ip {{ master }} --user ubuntu --k3s-version={{ version }}"
    delegate_to: "{{ master }}"

  - name: Taint for low power/memory
    when: inventory_hostname in groups['low_power_nodes']
    delegate_to: "{{ master }}"
    command: "kubectl taint nodes {{ inventory_hostname }} {{ item }}:NoSchedule"
    with_items:
      - cpu=low
      - memory=low

  - name: Taint for 32-bit
    when: inventory_hostname in groups['32_bit_nodes']
    delegate_to: "{{ master }}"
    command: "kubectl taint nodes {{ inventory_hostname }} {{ item }}:NoSchedule"
    with_items:
      - bit=32